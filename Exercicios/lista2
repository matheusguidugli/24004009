1 Exercícios - while e Do-while
Exercício 1:
#include <stdio.h>

int main() {
    double temperaturaAtual;
    do {
        printf("Digite a temperatura atual (°C): ");
        scanf("%lf", &temperaturaAtual);
        if (temperaturaAtual < 20 || temperaturaAtual > 25) {
            printf("ALERTA: Temperatura fora do intervalo seguro (20°C - 25°C)\n");
        } else {
            printf("Temperatura dentro do intervalo seguro\n");
        }
    } while (1);
    return 0;
}
Exercício 2:
#include <stdio.h>
int main() {
int combustivel;
do {
printf("Digite o nível de combustível (%%): ");
scanf("%d", &combustivel);
if (combustivel < 15) {
printf("ALERTA: Nível de combustível abaixo de 15%%. Por favor, recarregue o veículo");
} else if (combustivel < 100) {
printf("Combustível suficiente, mas não está cheio");
} else {
printf("Tanque cheio");
}
} while (combustivel < 100);
return 0;
}

Exercício 3:
#include <stdio.h>
int main() {
int passos;
int total = 0;
int meta = 10000;
do {
printf("Digite a quantidade de passos dados: ");
scanf("%d", &passos);
total += passos;
printf("Total de passos até o momento: %d", total);
if (total >= meta) {
printf(" Você atingiu ou ultrapassou a meta diária de 10.000 passos");
}
} while (total < meta);
return 0;
}

Exercício 4:
#include <stdio.h>

int main() {
    double valorDeposito;
    do {
        printf("Digite o valor do depósito inicial (mínimo R$500,00): ");
        scanf("%lf", &valorDeposito);
        if (valorDeposito < 500) {
            printf("Erro: O valor deve ser no mínimo R$500,00. Tente novamente\n");
        } else {
            printf("Depósito aceito, conta aberta com sucesso\n");
        }
    } while (valorDeposito < 500);
    return 0;
}

Desafio:
#include <stdio.h>
#include <math.h>
double calcularMedia(double precos[], int n) {
double soma = 0;
for (int i = 0; i < n; i++) {
soma += precos[i];
}
return soma / n;
}
double calcularDesvioPadrao(double precos[], int n, double media) {
double soma = 0;
for (int i = 0; i < n; i++) {
soma += pow(precos[i] - media, 2);
}
return sqrt(soma / n);
}
int main() {
int dias;
double precos[100];
char opcao;
do {
printf("Quantos dias deseja analisar? ");
scanf("%d", &dias);
for (int i = 0; i < dias; i++) {
printf("Digite o preço da ação no dia %d: ", i + 1);
scanf("%lf", &precos[i]);
}
double media = calcularMedia(precos, dias);
double desvioPadrao = calcularDesvioPadrao(precos, dias, media);
printf("Média dos preços: %.2lf\n", media);
printf("Desvio padrão: %.2lf\n", desvioPadrao);
if (desvioPadrao < 0.05 * media) {
printf("A ação é considerada ESTÁVEL.\n");
} else {
printf("A ação é considerada VOLÁTIL.\n");
}
printf("Deseja analisar novos dados? (s/n): ");
scanf(" %c", &opcao);
} while (opcao == 's' || opcao == 'S');
return 0;
}

2 Exercícios - Do while
Exercício 1:
#include <stdio.h>
#include <string.h>

int main() {
char comando[10];
printf("Controle de Movimento do Robô (Digite 'sair' para encerrar):\n");
do {
printf("Digite o comando (frente, tras, esquerda, direita): ");
scanf("%s", comando);
if (strcmp(comando, "sair") == 0) {
printf("Encerrando...\n");
} else {
printf("Comando recebido: %s\n", comando);
}
} while (strcmp(comando, "sair") != 0);
return 0;
}
Exercício 2:
#include <stdio.h>
int main() {
float distancia;
char continuar;
printf("Leitura de Sensores de Distância (Digite 'n' para parar):\n");
do {
printf("Digite a distância medida (em cm): ");
scanf("%f", &distancia);
if (distancia < 10) {
printf("ALERTA: Distância inferior a 10 cm!\n");
} else {
printf("Distância registrada: %.2f cm\n", distancia);
}
printf("Deseja continuar? (s/n): ");
scanf(" %c", &continuar);
} while (continuar == 's' || continuar == 'S');
return 0;
}
Exercício 3:
#include <stdio.h>

int main() {
int opcao;
do {
printf("Selecione uma ação do robô:");
printf("1. Ligar lâmpada ");
printf("2. Tocar som");
printf("3. Mover braço");
printf("4. Encerrar");
printf("Digite sua opção: ");
scanf("%d", &opcao);
switch (opcao) {
case 1:
printf("Lâmpada ligada");
break;
case 2:
printf("Som tocando");
break;
case 3:
printf("Braço do robô movido");
break;
case 4:
printf("Encerrando.");
break;
default:
printf("Opção inválida");
}
} while (opcao != 4);
return 0;
}
Exercício 4:
#include <stdio.h>
int main() {
int bateria;
do {
printf("Digite o nível da bateria (%%): ");
scanf("%d", &bateria);
if (bateria <= 20) {
printf("ALERTA: Bateria baixa! Recarregue o robô");
} else {
printf("Bateria em nível adequado");
}
} while (bateria <= 20);
printf("Bateria acima de 20%%. Monitoramento encerrado");
return 0;
}
Exercício 5:
#include <stdio.h>
#include <string.h>
int main() {
int x = 2, y = 2; // Posição inicial no grid 5x5
char comando[10];
printf("Simulação de Navegação Autônoma (Digite 'parar' para encerrar):");
do {
printf("Digite o comando (cima, baixo, esquerda, direita): ");
scanf("%s", comando);
if (strcmp(comando, "parar") == 0) {
printf("Encerrando");
} else if (strcmp(comando, "cima") == 0 && y > 0) {
y--;
} else if (strcmp(comando, "baixo") == 0 && y < 4) {
y++;
} else if (strcmp(comando, "esquerda") == 0 && x > 0) {
x--;
} else if (strcmp(comando, "direita") == 0 && x < 4) {
x++;
} else {
printf("Movimento inválido ");
}
printf("Posição atual: (%d, %d)\n", x, y);
} while (strcmp(comando, "parar") != 0);
return 0;
}
2.1 Desafio
#include <stdio.h>
#include <string.h>
void controleMovimento() {
char comando[10];
printf("Controle de Movimento do Robô (Digite 'sair' para encerrar)");
do {
printf("Digite o comando (frente, tras, esquerda, direita): ");
scanf("%s", comando);
if (strcmp(comando, "sair") != 0) {
printf("Comando recebido: %s", comando);
}
} while (strcmp(comando, "sair") != 0);
}
void leituraSensores() {
float distancia;
char continuar;
do {
printf("Digite a distância medida (em cm): ");
scanf("%f", &distancia);
if (distancia < 10) {
printf("ALERTA: Distância inferior a 10 cm!");
} else {
printf("Distância registrada: %.2f cm", distancia);
}
printf("Deseja continuar? ");
scanf(" %c", &continuar);
} while (continuar == 's' || continuar == 'S');
}
void controleAtuacao() {
int opcao;
do {
printf("\nSelecione uma ação do robô:");
printf("1. Ligar lâmpada");
printf("2. Tocar som");
printf("3. Mover braço");
printf("4. Voltar ao menu principal");
printf("Digite sua opção: ");
scanf("%d", &opcao);
switch (opcao) {
case 1:
printf("Lâmpada ligada");
break;
case 2:
printf("Som tocando");
break;
case 3:
printf("Braço do robô movido");
break;
case 4:
printf("Retornando ao menu principal");
break;
default:
printf("Opção inválida.");
}
} while (opcao != 4);
}
void monitoramentoBateria() {
int bateria;
do {
printf("Digite o nível da bateria (%%): ");
scanf("%d", &bateria);

if (bateria <= 20) {
printf("ALERTA: Bateria baixa! Recarregue o robô.");
} else {
printf("Bateria em nível adequado");
}
} while (bateria <= 20);
}
void navegacaoAutonoma() {
int x = 2, y = 2; // Posição inicial no grid 5x5
char comando[10];
printf("Simulação de Navegação Autônoma (Digite 'parar' para encerrar):");
do {
printf("Digite o comando (cima, baixo, esquerda, direita): ");
scanf("%s", comando);
if (strcmp(comando, "parar") == 0) {
printf("Encerrando");
} else if (strcmp(comando, "cima") == 0 && y > 0) {
y--;
} else if (strcmp(comando, "baixo") == 0 && y < 4) {
y++;
} else if (strcmp(comando, "esquerda") == 0 && x > 0) {
x--;
} else if (strcmp(comando, "direita") == 0 && x < 4) {
x++;
} else {
printf("Movimento inválido ");
}

printf("Posição atual: (%d, %d)\n", x, y);
} while (strcmp(comando, "parar") != 0);
}
int main() {
int opcao;
do {
printf("MENU PRINCIPAL:");
printf("1. Controle de Movimento");
printf("2. Leitura de Sensores de Distância");
printf("3. Controle de Atuação");
printf("4. Monitoramento de Bateria");
printf("5. Navegação Autônoma");
printf("6. Sair");
printf("Escolha uma opção: ");
scanf("%d", &opcao);
switch (opcao) {
case 1:
controleMovimento();
break;
case 2:
leituraSensores();
break;
case 3:
controleAtuacao();
break;
case 4:
monitoramentoBateria();
break;
case 5:
navegacaoAutonoma();
break;
case 6:
printf("Encerrando o programa");
break;
default:
printf("Opção inválida.");
}
} while (opcao != 6);
return 0;
}




3 Exercícios práticos usando Arduino e conceitos de estrutura de re-
petição
1)  int cameraData[10];

2)Esse código faz a leitura do valor analógico do pino A1do Arduino e o armazena na quarta posição (índice 3.


3) Para inicializar um vetor de floats chamado temperaturas com os valores 25.5, 26.0, 24.8, 27.3 e 26.5, usamos:
float temperaturas[] = {25.5, 26.0, 24.8, 27.3, 26.5};


4) O código percorre os primeiros 4 elementos do vetor ledPinse imprime cada elemento no monitor serial. A função Serial.printlnexibe o valor na porta serial, seguida por uma nova linha.
A saída seria:
2
3
4
5


5)
 int ledPins[] = {2, 3, 4, 5};
void setup() {
Serial.begin(9600);
for (int i = 0; i < 4; i++) {
Serial.println(ledPins[i]);
}
}


6)
 int randomValues[5];
void setup() {
Serial.begin(9600);
randomSeed(analogRead(0));
for (int i = 0; i < 5; i++) {
randomValues[i] = random(0, 100);
Serial.println(randomValues[i]);
}
}



7)
- O loop percorre o vetor sensorReadingsposição por posição.
-Quando encontra o valor 150, ele interrompe a execução do loop com a instrução break.
-Isso é útil para parar a busca assim que a condição desejada for atendida.

8) sizeof(sensorData) / sizeof(sensorData[0])
sizeof(sensorData)retorna o tamanho total do vetor em bytes.
sizeof(sensorData[0])retorna o tamanho de um único elemento do vetor.
Dividindo o total pelo tamanho de um elemento, obtemos a quantidade de elementos no vetor.



4 Problemas
a) A primeira linha da matriz ambientData representa as temperaturasao longo de cinco momentos diferentes no primeiro local de monitoramento. Cada valor é uma leitura da temperatura.

b) A segunda linha da matriz ambientData representa as leituras da umidade do solo no segundo local ao longo de cinco momentos. Para calcular a média:



A média da umidade do solo no segundo local é de 40,4% .

c) A terceira linha da matriz ambientData representa as leituras da concentração de CO2 (em ppm) no terceiro local ao longo de cinco momentos. O valor máximo é 420 ppm

d) 
#include <Arduino.h>
void setup() {
Serial.begin(9600);
int ambientData[3][5] = {
{22, 25, 23, 21, 24},
{45, 38, 42, 40, 37},
{400, 380, 420, 410, 390}
};
int totalLocais = 3; 
int totalLeituras = 5;
int somaTemperaturas = 0;
for (int j = 0; j < totalLeituras; j++) {
somaTemperaturas += ambientData[0][j]; 
}
float mediaTemperaturas = somaTemperaturas / (float)totalLeituras;
Serial.print("Média de temperatura em todos os momentos: ");
Serial.println(mediaTemperaturas);
}
void loop() {
}
